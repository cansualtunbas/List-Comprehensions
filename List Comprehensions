{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"# **Basic codes related to List Comprehensions structure**","metadata":{}},{"cell_type":"code","source":"\n##################################################\n# List Comprehensions\n##################################################\n\n# ###############################################\n# # GÖREV 1: List Comprehension yapısı kullanarak car_crashes verisindeki numeric değişkenlerin isimlerini büyük harfe çeviriniz ve başına NUM ekleyiniz.\n# ###############################################\n#\nimport seaborn as sns\ndf=sns.load_dataset(\"car_crashes\")\ndf.columns\ndf.info()\n[\"NUM_\"+col.upper() if df[col].dtype==\"float\" else col.upper() for col in df.columns ]\n\n# # Beklenen Çıktı\n#\n# # ['NUM_TOTAL',\n# #  'NUM_SPEEDING',\n# #  'NUM_ALCOHOL',\n# #  'NUM_NOT_DISTRACTED',\n# #  'NUM_NO_PREVIOUS',\n# #  'NUM_INS_PREMIUM',\n# #  'NUM_INS_LOSSES',\n# #  'ABBREV']\n#\n# # Notlar:\n# # Numerik olmayanların da isimleri büyümeli.\n# # Tek bir list comp yapısı ile yapılmalı.\n\n\nimport seaborn as sns\nimport pandas as pd\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\npd.set_option('display.width', 500)\n\ndf = sns.load_dataset(\"car_crashes\")\ndf.columns\ndf.info()\n\n\n\n\n# ###############################################\n# # GÖREV 2: List Comprehension yapısı kullanarak car_crashes verisindeki isminde \"no\" barındırmayan değişkenlerin isimlerininin sonuna \"FLAG\" yazınız.\n# ###############################################\n#\n# # Notlar:\n# # Tüm değişken isimleri büyük olmalı.\n# # Tek bir list comp ile yapılmalı.\n#\n\n[col.upper()+\"_FLAG\"  if \"no\" not in col else col.upper() for col in df.columns]\n# # Beklenen çıktı:\n#\n# # ['TOTAL_FLAG',\n# #  'SPEEDING_FLAG',\n# #  'ALCOHOL_FLAG',\n# #  'NOT_DISTRACTED',\n# #  'NO_PREVIOUS',\n# #  'INS_PREMIUM_FLAG',\n# #  'INS_LOSSES_FLAG',\n# #  'ABBREV_FLAG']\n\n\n\n# ###############################################\n# # Görev 3: List Comprehension yapısı kullanarak aşağıda verilen değişken isimlerinden FARKLI olan değişkenlerin isimlerini seçiniz ve yeni bir dataframe oluşturunuz.\n# ###############################################\n\nog_list = [\"abbrev\", \"no_previous\"]\nnew_cols=[col for col in df.columns if col not in og_list]\nnew_df=df[new_cols]\n# # Notlar:\n# # Önce yukarıdaki listeye göre list comprehension kullanarak new_cols adında yeni liste oluşturunuz.\n# # Sonra df[new_cols] ile bu değişkenleri seçerek yeni bir df oluşturunuz adını new_df olarak isimlendiriniz.\n#\n# # Beklenen çıktı:\n#\n# #    total  speeding  alcohol  not_distracted  ins_premium  ins_losses\n# # 0 18.800     7.332    5.640          18.048      784.550     145.080\n# # 1 18.100     7.421    4.525          16.290     1053.480     133.930\n# # 2 18.600     6.510    5.208          15.624      899.470     110.350\n# # 3 22.400     4.032    5.824          21.056      827.340     142.390\n# # 4 12.000     4.200    3.360          10.920      878.410     165.630\n#","metadata":{"_uuid":"cf79141e-70ea-401d-90bc-e8872600fef5","_cell_guid":"3e35839b-ee76-4c8b-9ffb-e1e4b5be1d1f","jupyter":{"outputs_hidden":false},"collapsed":false},"execution_count":null,"outputs":[]}]}
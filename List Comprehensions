{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a96f30c3",
   "metadata": {
    "papermill": {
     "duration": 0.002779,
     "end_time": "2024-08-27T18:38:52.925901",
     "exception": false,
     "start_time": "2024-08-27T18:38:52.923122",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "113a8da1",
   "metadata": {
    "papermill": {
     "duration": 0.00192,
     "end_time": "2024-08-27T18:38:52.930252",
     "exception": false,
     "start_time": "2024-08-27T18:38:52.928332",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Basic codes related to List Comprehensions structure**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5bedfc97",
   "metadata": {
    "_cell_guid": "3e35839b-ee76-4c8b-9ffb-e1e4b5be1d1f",
    "_uuid": "cf79141e-70ea-401d-90bc-e8872600fef5",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-08-27T18:38:52.937947Z",
     "iopub.status.busy": "2024-08-27T18:38:52.937358Z",
     "iopub.status.idle": "2024-08-27T18:38:55.956881Z",
     "shell.execute_reply": "2024-08-27T18:38:55.955444Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 3.027089,
     "end_time": "2024-08-27T18:38:55.959999",
     "exception": false,
     "start_time": "2024-08-27T18:38:52.932910",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 51 entries, 0 to 50\n",
      "Data columns (total 8 columns):\n",
      " #   Column          Non-Null Count  Dtype  \n",
      "---  ------          --------------  -----  \n",
      " 0   total           51 non-null     float64\n",
      " 1   speeding        51 non-null     float64\n",
      " 2   alcohol         51 non-null     float64\n",
      " 3   not_distracted  51 non-null     float64\n",
      " 4   no_previous     51 non-null     float64\n",
      " 5   ins_premium     51 non-null     float64\n",
      " 6   ins_losses      51 non-null     float64\n",
      " 7   abbrev          51 non-null     object \n",
      "dtypes: float64(7), object(1)\n",
      "memory usage: 3.3+ KB\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 51 entries, 0 to 50\n",
      "Data columns (total 8 columns):\n",
      " #   Column          Non-Null Count  Dtype  \n",
      "---  ------          --------------  -----  \n",
      " 0   total           51 non-null     float64\n",
      " 1   speeding        51 non-null     float64\n",
      " 2   alcohol         51 non-null     float64\n",
      " 3   not_distracted  51 non-null     float64\n",
      " 4   no_previous     51 non-null     float64\n",
      " 5   ins_premium     51 non-null     float64\n",
      " 6   ins_losses      51 non-null     float64\n",
      " 7   abbrev          51 non-null     object \n",
      "dtypes: float64(7), object(1)\n",
      "memory usage: 3.3+ KB\n"
     ]
    }
   ],
   "source": [
    "\n",
    "##################################################\n",
    "# List Comprehensions\n",
    "##################################################\n",
    "\n",
    "# ###############################################\n",
    "# # GÖREV 1: List Comprehension yapısı kullanarak car_crashes verisindeki numeric değişkenlerin isimlerini büyük harfe çeviriniz ve başına NUM ekleyiniz.\n",
    "# ###############################################\n",
    "#\n",
    "import seaborn as sns\n",
    "df=sns.load_dataset(\"car_crashes\")\n",
    "df.columns\n",
    "df.info()\n",
    "[\"NUM_\"+col.upper() if df[col].dtype==\"float\" else col.upper() for col in df.columns ]\n",
    "\n",
    "# # Beklenen Çıktı\n",
    "#\n",
    "# # ['NUM_TOTAL',\n",
    "# #  'NUM_SPEEDING',\n",
    "# #  'NUM_ALCOHOL',\n",
    "# #  'NUM_NOT_DISTRACTED',\n",
    "# #  'NUM_NO_PREVIOUS',\n",
    "# #  'NUM_INS_PREMIUM',\n",
    "# #  'NUM_INS_LOSSES',\n",
    "# #  'ABBREV']\n",
    "#\n",
    "# # Notlar:\n",
    "# # Numerik olmayanların da isimleri büyümeli.\n",
    "# # Tek bir list comp yapısı ile yapılmalı.\n",
    "\n",
    "\n",
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "pd.set_option('display.max_rows', None)\n",
    "pd.set_option('display.max_columns', None)\n",
    "pd.set_option('display.width', 500)\n",
    "\n",
    "df = sns.load_dataset(\"car_crashes\")\n",
    "df.columns\n",
    "df.info()\n",
    "\n",
    "pd.options.display.float_format = '{:.3f}'.format\n",
    "\n",
    "\n",
    "# ###############################################\n",
    "# # GÖREV 2: List Comprehension yapısı kullanarak car_crashes verisindeki isminde \"no\" barındırmayan değişkenlerin isimlerininin sonuna \"FLAG\" yazınız.\n",
    "# ###############################################\n",
    "#\n",
    "# # Notlar:\n",
    "# # Tüm değişken isimleri büyük olmalı.\n",
    "# # Tek bir list comp ile yapılmalı.\n",
    "#\n",
    "\n",
    "[col.upper()+\"_FLAG\"  if \"no\" not in col else col.upper() for col in df.columns]\n",
    "# # Beklenen çıktı:\n",
    "#\n",
    "# # ['TOTAL_FLAG',\n",
    "# #  'SPEEDING_FLAG',\n",
    "# #  'ALCOHOL_FLAG',\n",
    "# #  'NOT_DISTRACTED',\n",
    "# #  'NO_PREVIOUS',\n",
    "# #  'INS_PREMIUM_FLAG',\n",
    "# #  'INS_LOSSES_FLAG',\n",
    "# #  'ABBREV_FLAG']\n",
    "\n",
    "\n",
    "\n",
    "# ###############################################\n",
    "# # Görev 3: List Comprehension yapısı kullanarak aşağıda verilen değişken isimlerinden FARKLI olan değişkenlerin isimlerini seçiniz ve yeni bir dataframe oluşturunuz.\n",
    "# ###############################################\n",
    "\n",
    "og_list = [\"abbrev\", \"no_previous\"]\n",
    "new_cols=[col for col in df.columns if col not in og_list]\n",
    "new_df=df[new_cols]\n",
    "# # Notlar:\n",
    "# # Önce yukarıdaki listeye göre list comprehension kullanarak new_cols adında yeni liste oluşturunuz.\n",
    "# # Sonra df[new_cols] ile bu değişkenleri seçerek yeni bir df oluşturunuz adını new_df olarak isimlendiriniz.\n",
    "#\n",
    "# # Beklenen çıktı:\n",
    "#\n",
    "# #    total  speeding  alcohol  not_distracted  ins_premium  ins_losses\n",
    "# # 0 18.800     7.332    5.640          18.048      784.550     145.080\n",
    "# # 1 18.100     7.421    4.525          16.290     1053.480     133.930\n",
    "# # 2 18.600     6.510    5.208          15.624      899.470     110.350\n",
    "# # 3 22.400     4.032    5.824          21.056      827.340     142.390\n",
    "# # 4 12.000     4.200    3.360          10.920      878.410     165.630\n",
    "#"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.902777,
   "end_time": "2024-08-27T18:38:56.585005",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-27T18:38:49.682228",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
